import { createAsyncThunk, createSlice, current } from "@reduxjs/toolkit";
import { EmailVerifyItems } from "../../pages/auth/signup";
import { ApiResponse, buildPath, GetApi, PostApi } from "./Base";
import { InvoiceDetails } from "./customerSlice";

export enum ApiState {
  IDLE = "idle",
  LOADING = "loading",
  SUCCESS = "success",
  ERROR = "error",
}

export interface InitialTechState {
  data: EmailVerifyItems[];
  showTechnician?: EmailVerifyItems;
  invoiceDetails?: InvoiceDetails[];
  status: ApiState;
}
const initialState: InitialTechState = {
  data: [] as EmailVerifyItems[],
  status: ApiState.IDLE,
};

export const getTechnicianList = createAsyncThunk(
  "technician/getTechnicianList",
  async (dataType: string = "full") => {
    const response = await GetApi(buildPath("techniciansList"), {
      params: {
        dataType,
      },
    });
    // console.log(response);

    // The value we return becomes the `fulfilled` action payload
    return response.data as ApiResponse<EmailVerifyItems[]>;
  }
);
export const getTechnician = createAsyncThunk(
  "technician/getTechnician",
  async ({ email }: { email: string }) => {
    const response = await PostApi(buildPath("getTechnician"), {
      email,
    });
    // console.log(response);

    // The value we return becomes the `fulfilled` action payload
    return response.data as ApiResponse<EmailVerifyItems>;
  }
);
export const removeTechnician = createAsyncThunk(
  "technician/removeTechnician",
  async ({ email }: { email: string }) => {
    const response = await PostApi(buildPath("removeTechnician"), {
      email,
    });
    // console.log(response);

    // The value we return becomes the `fulfilled` action payload
    return response.data as ApiResponse<EmailVerifyItems>;
  }
);

export const blockUnblockUser = createAsyncThunk(
  "technician/blockUnblockUser",
  async ({ email, block }: { email: string; block: boolean }) => {
    const response = await PostApi(buildPath("blockUnblockUser"), {
      email,
      block,
    });
    // console.log(response);

    // The value we return becomes the `fulfilled` action payload
    return response.data as ApiResponse<any>;
  }
);

export const getInvoices = createAsyncThunk(
  "technician/getInvoices",
  async () => {
    const response = await PostApi(buildPath("getInvoices"), {});
    // console.log(response);

    // The value we return becomes the `fulfilled` action payload
    return response.data as ApiResponse<InvoiceDetails[]>;
  }
);

export const technicianSlice = createSlice({
  name: "technician",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTechnicianList.pending, (state) => {
        state.status = ApiState.LOADING;
        // console.log(state);
      })
      .addCase(getTechnicianList.fulfilled, (state, action) => {
        state.status = ApiState.SUCCESS;
        // state.data = { ...action.meta.arg };
        // console.log(current(state).data);
        // console.log(action.payload);

        state.data = action.payload?.response as EmailVerifyItems[];
        // state.value += action.payload;
      })
      .addCase(getTechnicianList.rejected, (state, action) => {
        state.status = ApiState.ERROR;
        // console.log(state);

        // state.value += action.payload;
      });
    builder
      .addCase(getTechnician.pending, (state) => {
        state.status = ApiState.LOADING;
        // console.log(state);
      })
      .addCase(getTechnician.fulfilled, (state, action) => {
        state.status = ApiState.SUCCESS;
        // state.data = { ...action.meta.arg };
        // console.log(current(state).data);
        // console.log(action.payload);
        state.showTechnician = action.payload.response;
        // state.value += action.payload;
      })
      .addCase(getTechnician.rejected, (state, action) => {
        state.status = ApiState.ERROR;
        // console.log(state);

        // state.value += action.payload;
      });
    builder
      .addCase(removeTechnician.pending, (state) => {
        state.status = ApiState.LOADING;
        // console.log(state);
      })
      .addCase(removeTechnician.fulfilled, (state, action) => {
        state.status = ApiState.SUCCESS;
        // state.data = { ...action.meta.arg };
        // console.log(current(state).data);
        // console.log(action.payload);
        state.showTechnician = action.payload.response;
        // state.value += action.payload;
      })
      .addCase(removeTechnician.rejected, (state, action) => {
        state.status = ApiState.ERROR;
        // console.log(state);

        // state.value += action.payload;
      });
    builder
      .addCase(getInvoices.pending, (state) => {
        state.status = ApiState.LOADING;
        // console.log(state);
      })
      .addCase(getInvoices.fulfilled, (state, action) => {
        state.status = ApiState.SUCCESS;
        // state.data = { ...action.meta.arg };
        // console.log(current(state).data);
        // console.log(action.payload);
        state.invoiceDetails = action.payload.response;
        // state.value += action.payload;
      })
      .addCase(getInvoices.rejected, (state, action) => {
        state.status = ApiState.ERROR;
        // console.log(state);

        // state.value += action.payload;
      });
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

export default technicianSlice.reducer;
